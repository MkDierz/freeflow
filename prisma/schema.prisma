generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

model Post {
    id        Int      @id @default(autoincrement())
    name      String
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    createdBy   User   @relation(fields: [createdById], references: [id])
    createdById String

    @@index([name])
}

model Account {
    id                       String  @id @default(cuid())
    userId                   String
    type                     String
    provider                 String
    providerAccountId        String
    refresh_token            String?
    access_token             String?
    expires_at               Int?
    token_type               String?
    scope                    String?
    id_token                 String?
    session_state            String?
    user                     User    @relation(fields: [userId], references: [id], onDelete: Cascade)
    refresh_token_expires_in Int?

    @@unique([provider, providerAccountId])
}

model Session {
    id           String   @id @default(cuid())
    sessionToken String   @unique
    userId       String
    expires      DateTime
    user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
    id            String        @id @default(cuid())
    name          String?
    email         String?       @unique
    emailVerified DateTime?
    image         String?
    accounts      Account[]
    sessions      Session[]
    posts         Post[]
    Wallet        Wallet[]
    Category      Category[]
    Tag           Tag[]
    Transaction   Transaction[]
}

model VerificationToken {
    identifier String
    token      String   @unique
    expires    DateTime

    @@unique([identifier, token])
}

enum WalletType {
    cash
    bank
}

model Wallet {
    id                String        @id @default(uuid())
    userId            String
    name              String
    balance           Float
    description       String?
    bankAccountNumber String?
    type              WalletType
    transactions      Transaction[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("wallets")
}

enum TransactionType {
    income
    expense
}

model Category {
    id           String          @id @default(uuid())
    name         String
    type         TransactionType
    userId       String
    parentId     String?
    transactions Transaction[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user   User       @relation(fields: [userId], references: [id], onDelete: Cascade)
    parent Category?  @relation("subCategory", fields: [parentId], references: [id], onDelete: Cascade)
    child  Category[] @relation("subCategory")

    @@map("categories")
}

model Tag {
    id           String        @id @default(uuid())
    name         String
    description  String?
    userId       String
    transactions Transaction[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user User @relation(fields: [userId], references: [id], onDelete: Cascade)

    @@map("tags")
}

model Transaction {
    id         String          @id @default(uuid())
    value      Int
    type       TransactionType
    note       String?
    userId     String
    walletId   String
    categoryId String
    tags       Tag[]

    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt

    user     User     @relation(fields: [userId], references: [id], onDelete: Cascade)
    wallet   Wallet   @relation(fields: [walletId], references: [id], onDelete: Cascade)
    category Category @relation(fields: [categoryId], references: [id], onDelete: Cascade)

    @@map("transactions")
}
